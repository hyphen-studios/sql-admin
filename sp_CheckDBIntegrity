CREATE PROCEDURE sp_CheckDBIntegrity
as
/******************************************************************************
*  Stored Procedure Name: sp_CheckDBIntegrity
*  Input Parameters: none
*  Use Case: exec sp_CheckDBIntegrity
*  Description: Loops through user database, and checks the integrity of databases using a dbcc command
*  History:
*  Date:		Action:								Developer: 
*  2018-12-4	Initial version						Patrick Lee
******************************************************************************/

/*------------------------ Declared variables ------------------------*/
DECLARE @current int
DECLARE @maxrows INT
DECLARE @dbname NVARCHAR(200)
DECLARE @guid uniqueidentifier  
DECLARE @sql nvarchar(250)
DECLARE @starttime DATETIME

/*------------------------ Database temp tables ------------------------*/
-- Drop temp tables if they exist
IF OBJECT_ID('tempdb..#databases') IS NOT NULL DROP TABLE #databases
IF OBJECT_ID('tempdb..#sqllogs') IS NOT NULL DROP TABLE #sqllogs
IF OBJECT_ID('tempdb..#checkdbresults') IS NOT NULL DROP TABLE #checkdbresults
IF OBJECT_ID('tempdb..#tasks') IS NOT NULL DROP TABLE #tasks

-- Create temp tables
CREATE TABLE #databases
(
ID INT IDENTITY(1, 1) primary key ,
DBName NVARCHAR(200),
);

CREATE TABLE #sqllogs 
(
LogDate datetime,
ProcessInfo varchar(100),
TextLine varchar(500)
);

CREATE TABLE #checkdbresults 
(
LogDate datetime,
TextLine varchar(500),
DBName NVARCHAR(200),
ErrorsFound INT,
ErrorsFixed int
);

CREATE TABLE #tasks
(
ID INT IDENTITY(1, 1) primary key ,
DBName NVARCHAR(200),
Guid NVARCHAR(200),
StartTime DATETIME
);

-- Insert database names into a temp table
INSERT INTO #databases (DBName)
SELECT name FROM sys.databases WHERE state_desc = 'ONLINE'

SET @current = 1
SET @maxrows = (SELECT MAX(id) FROM #databases)

-- Loop through the databases
while (@current <= @maxrows)
	BEGIN
		SET @guid = NEWID()
		SET @dbname = (SELECT dbname FROM #databases WHERE id = @current)
		SET @sql = 'Use [' +  @dbname + ']; DBCC CHECKDB WITH NO_INFOMSGS;'

		-- Insert Record into MaintenanceTask table with start time
		INSERT INTO maintenancetasks(JobID, ProcessTask, DBname, StartTime)
		VALUES(@guid,'Check DB Integrity', @dbname, GETDATE())

		PRINT @sql
		exec sp_executesql @sql;

		-- Update MaintenceTasks with end time and command
		UPDATE maintenancetasks
		SET
        command = @sql,
		EndTime = GETDATE(),
		RunTime = DATEDIFF(MINUTE, StartTime, GETDATE())
		WHERE JobID = @guid;

		-- loop to the next database
		set @current +=1

	END

-- Get DBCC CHECKDB result info from the SQL logs
INSERT #sqllogs EXEC sp_readerrorlog 0, 1, 'DBCC CHECKDB'

-- Parse through the logs and insert results into a temp table
INSERT INTO #checkdbresults (LogDate, TextLine, DBName, ErrorsFound, ErrorsFixed)
SELECT 
    LogDate,	
	TextLine,
    dbo.ufn_GetStringBetween (TextLine ,'(',')' ) AS CHECKED_DB,
    dbo.ufn_GetStringBetween (TextLine ,'found','errors' ) AS ERRORS_FOUND,
    dbo.ufn_GetStringBetween (TextLine ,'repaired','errors.' ) AS ERRORS_REPAIRED
FROM 
    #sqllogs
WHERE 
    TextLine like '%DBCC CHECKDB%'

-- Insert the latest DBCC tasks from the maintenancetasks table into a te
INSERT INTO #tasks (DBName,Guid, StartTime)
SELECT dbname, jobid, StartTime
FROM dbo.MaintenanceTasks
WHERE DATEDIFF(MINUTE, StartTime, GETDATE()) < 25  AND ProcessTask = 'Check DB Integrity'

SET @current = 1
SET @maxrows = (SELECT MAX(id) FROM #tasks)

-- Loop through the databases again
while (@current <= @maxrows)
	BEGIN
		SELECT @dbname=dbname, @guid=Guid, @starttime=StartTime  FROM #tasks WHERE id = @current;

		INSERT INTO dbo.MaintenanceCheckDB(JobID, DBName, CheckDBErrors, CheckDBFixed, CheckDBText)
		SELECT 
			@guid,	
			dbo.ufn_GetStringBetween (TextLine ,'(',')' ) AS CHECKED_DB,
			dbo.ufn_GetStringBetween (TextLine ,'found','errors' ) AS ERRORS_FOUND,
			dbo.ufn_GetStringBetween (TextLine ,'repaired','errors.' ) AS ERRORS_REPAIRED,
			TextLine
		FROM 
			#sqllogs
		WHERE 
			TextLine like '%DBCC CHECKDB ('+ @dbname +')%'
			AND DATEDIFF(MINUTE, LogDate, @starttime) <= 1 		

	   -- loop to the next database
		set @current +=1

	END
